package com.ecommerce.website.service.impl;

import java.lang.StackWalker.Option;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ecommerce.website.constant.ApiConstant;
import com.ecommerce.website.constant.ResponseCodeConstant;
import com.ecommerce.website.dto.ItemDTO;
import com.ecommerce.website.dto.ResponseDTO;
import com.ecommerce.website.dto.ResponseDTOBuilder;
import com.ecommerce.website.models.Item;
import com.ecommerce.website.repository.ItemRepository;
import com.ecommerce.website.service.ItemService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ItemServiceImpl implements ItemService{

	@Autowired
	private ItemRepository itemRepository;
	
	ModelMapper modelMapper=new ModelMapper();
	
	@Autowired
	private ResponseDTOBuilder responseDTOBuilder;
	
	@Override
	public ResponseDTO addItem(ItemDTO itemDTO) {
		Item item=modelMapper.map(itemDTO, Item.class);
		Item saveItem=itemRepository.save(item);
		return responseDTOBuilder.build(ResponseCodeConstant.SUCCESS_CODE, saveItem);
	}

	@Override
	public ResponseDTO updateItem(Long id, ItemDTO itemDTO) {
		try {
			Optional<Item> optional=itemRepository.findById(id);
			if(optional.isPresent()) {
				Item item = updateItem(optional, itemDTO);
				Item updatedItem=itemRepository.save(item);
				return responseDTOBuilder.build(ResponseCodeConstant.SUCCESS_CODE,updatedItem);
			}
		} catch (Exception e) {
			log.info("Exception occurs while updating item : {} : {}",e,e.getMessage());
			return responseDTOBuilder.build(ResponseCodeConstant.EXCEPTION_CODE);
		}
		return null;
	}

	private Item updateItem(Optional<Item> optional, ItemDTO itemDTO) {
		Item item = optional.get();
		item.setCategory(itemDTO.getCategory());
		item.setDiscount(itemDTO.getDiscount());
		item.setPrice(itemDTO.getPrice());
		item.setRating(itemDTO.getRating());
		item.setSubCategory(itemDTO.getSubCategory());
		return item;
	}

	
}
